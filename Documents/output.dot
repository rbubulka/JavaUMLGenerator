digraph G { rankdir=BT;
"TreeSet" [
shape="record",
label= <{TreeSet||+&#60;init&#62; <br align="left"/>+&#60;init&#62; (Ljava&#47;util&#47;Comparator&#60;-TE;&#62;;)V <br align="left"/>+&#60;init&#62; (Ljava&#47;util&#47;Collection&#60;+TE;&#62;;)V <br align="left"/>+&#60;init&#62; (Ljava&#47;util&#47;SortedSet&#60;TE;&#62;;)V <br align="left"/>+iterator ()Ljava&#47;util&#47;Iterator&#60;TE;&#62;; <br align="left"/>+descendingIterator ()Ljava&#47;util&#47;Iterator&#60;TE;&#62;; <br align="left"/>+descendingSet ()Ljava&#47;util&#47;NavigableSet&#60;TE;&#62;; <br align="left"/>+size <br align="left"/>+isEmpty <br align="left"/>+contains <br align="left"/>+add (TE;)Z <br align="left"/>+remove <br align="left"/>+clear <br align="left"/>+addAll (Ljava&#47;util&#47;Collection&#60;+TE;&#62;;)Z <br align="left"/>+subSet (TE;ZTE;Z)Ljava&#47;util&#47;NavigableSet&#60;TE;&#62;; <br align="left"/>+headSet (TE;Z)Ljava&#47;util&#47;NavigableSet&#60;TE;&#62;; <br align="left"/>+tailSet (TE;Z)Ljava&#47;util&#47;NavigableSet&#60;TE;&#62;; <br align="left"/>+subSet (TE;TE;)Ljava&#47;util&#47;SortedSet&#60;TE;&#62;; <br align="left"/>+headSet (TE;)Ljava&#47;util&#47;SortedSet&#60;TE;&#62;; <br align="left"/>+tailSet (TE;)Ljava&#47;util&#47;SortedSet&#60;TE;&#62;; <br align="left"/>+comparator ()Ljava&#47;util&#47;Comparator&#60;-TE;&#62;; <br align="left"/>+first ()TE; <br align="left"/>+last ()TE; <br align="left"/>+lower (TE;)TE; <br align="left"/>+floor (TE;)TE; <br align="left"/>+ceiling (TE;)TE; <br align="left"/>+higher (TE;)TE; <br align="left"/>+pollFirst ()TE; <br align="left"/>+pollLast ()TE; <br align="left"/>+clone <br align="left"/>+spliterator ()Ljava&#47;util&#47;Spliterator&#60;TE;&#62;; <br align="left"/>}>];

TreeSet -> AbstractSet [arrowhead="onormal"];
TreeSet -> NavigableSet [arrowhead = "onormal", style = "dashed"];
TreeSet -> Cloneable [arrowhead = "onormal", style = "dashed"];
TreeSet -> Serializable [arrowhead = "onormal", style = "dashed"];
}